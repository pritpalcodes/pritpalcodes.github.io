<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Operating Systems on Pritpal Singh</title>
    <link>http://localhost:1313/tags/operating-systems/</link>
    <description>Recent content in Operating Systems on Pritpal Singh</description>
    <generator>Hugo -- 0.124.1</generator>
    <language>en</language>
    <lastBuildDate>Sat, 17 Aug 2024 01:29:35 +0530</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/operating-systems/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CompileX - Online Coding Platform</title>
      <link>http://localhost:1313/projects/07_compile-x/</link>
      <pubDate>Sat, 17 Aug 2024 01:29:35 +0530</pubDate>
      <guid>http://localhost:1313/projects/07_compile-x/</guid>
      <description>CompileX is a comprehensive online coding platform designed to empower developers of all skill levels. This platform offers a space to write and execute code, practice coding skills, and compete in coding contests.
‚ú® Features ‚öîÔ∏è Coding Playground Write, compile, and execute code in a user-friendly editor. Support for at least one compiled language. Real-time error feedback and performance metrics. üèãÔ∏è‚Äç‚ôÇÔ∏è Coding Arena Practice with pre-existing coding problems or upload new problems.</description>
    </item>
    <item>
      <title>Multi-Threaded Proxy Server</title>
      <link>http://localhost:1313/projects/05_multithreaded_proxyserver/</link>
      <pubDate>Fri, 26 Apr 2024 01:29:35 +0530</pubDate>
      <guid>http://localhost:1313/projects/05_multithreaded_proxyserver/</guid>
      <description>This project is implemented using C and Parsing of HTTP referred from Proxy Server Project Theory Introduction How did we implement Multi-threading? Used Semaphore instead of Condition Variables and pthread_join() and pthread_exit() function. pthread_join() requires us to pass the thread id of the the thread to wait for. Semaphore‚Äôs sem_wait() and sem_post() doesn‚Äôt need any parameter. So it is a better option. Motivation/Need of Project To Understand ‚Üí The working of requests from our local computer to the server.</description>
    </item>
  </channel>
</rss>
