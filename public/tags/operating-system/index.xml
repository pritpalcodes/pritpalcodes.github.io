<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Operating System on Pritpal Singh</title>
    <link>//localhost:1313/tags/operating-system/</link>
    <description>Recent content in Operating System on Pritpal Singh</description>
    <generator>Hugo -- 0.124.1</generator>
    <language>en</language>
    <lastBuildDate>Fri, 26 Apr 2024 01:29:35 +0530</lastBuildDate>
    <atom:link href="//localhost:1313/tags/operating-system/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Multi-Threaded Proxy Server</title>
      <link>//localhost:1313/projects/05_multithreaded_proxyserver/</link>
      <pubDate>Fri, 26 Apr 2024 01:29:35 +0530</pubDate>
      <guid>//localhost:1313/projects/05_multithreaded_proxyserver/</guid>
      <description>This project is implemented using C and Parsing of HTTP referred from Proxy Server Project Theory Introduction How did we implement Multi-threading? Used Semaphore instead of Condition Variables and pthread_join() and pthread_exit() function. pthread_join() requires us to pass the thread id of the the thread to wait for. Semaphore’s sem_wait() and sem_post() doesn’t need any parameter. So it is a better option. Motivation/Need of Project To Understand → The working of requests from our local computer to the server.</description>
    </item>
  </channel>
</rss>
